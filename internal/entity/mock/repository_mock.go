// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/MatheusBenetti/rate-limiter/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockcommonRepository is a mock of commonRepository interface.
type MockcommonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcommonRepositoryMockRecorder
}

// MockcommonRepositoryMockRecorder is the mock recorder for MockcommonRepository.
type MockcommonRepositoryMockRecorder struct {
	mock *MockcommonRepository
}

// NewMockcommonRepository creates a new mock instance.
func NewMockcommonRepository(ctrl *gomock.Controller) *MockcommonRepository {
	mock := &MockcommonRepository{ctrl: ctrl}
	mock.recorder = &MockcommonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommonRepository) EXPECT() *MockcommonRepositoryMockRecorder {
	return m.recorder
}

// GetBlockedDuration mocks base method.
func (m *MockcommonRepository) GetBlockedDuration(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockedDuration", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockedDuration indicates an expected call of GetBlockedDuration.
func (mr *MockcommonRepositoryMockRecorder) GetBlockedDuration(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockedDuration", reflect.TypeOf((*MockcommonRepository)(nil).GetBlockedDuration), ctx, key)
}

// GetRequest mocks base method.
func (m *MockcommonRepository) GetRequest(ctx context.Context, key string) (*entity.RateLimiter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx, key)
	ret0, _ := ret[0].(*entity.RateLimiter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockcommonRepositoryMockRecorder) GetRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockcommonRepository)(nil).GetRequest), ctx, key)
}

// SaveBlockedDuration mocks base method.
func (m *MockcommonRepository) SaveBlockedDuration(ctx context.Context, key string, BlockedDuration int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBlockedDuration", ctx, key, BlockedDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockedDuration indicates an expected call of SaveBlockedDuration.
func (mr *MockcommonRepositoryMockRecorder) SaveBlockedDuration(ctx, key, BlockedDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockedDuration", reflect.TypeOf((*MockcommonRepository)(nil).SaveBlockedDuration), ctx, key, BlockedDuration)
}

// UpsertRequest mocks base method.
func (m *MockcommonRepository) UpsertRequest(ctx context.Context, key string, rl *entity.RateLimiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRequest", ctx, key, rl)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRequest indicates an expected call of UpsertRequest.
func (mr *MockcommonRepositoryMockRecorder) UpsertRequest(ctx, key, rl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRequest", reflect.TypeOf((*MockcommonRepository)(nil).UpsertRequest), ctx, key, rl)
}

// MockApiKeyRepository is a mock of ApiKeyRepository interface.
type MockApiKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApiKeyRepositoryMockRecorder
}

// MockApiKeyRepositoryMockRecorder is the mock recorder for MockApiKeyRepository.
type MockApiKeyRepositoryMockRecorder struct {
	mock *MockApiKeyRepository
}

// NewMockApiKeyRepository creates a new mock instance.
func NewMockApiKeyRepository(ctrl *gomock.Controller) *MockApiKeyRepository {
	mock := &MockApiKeyRepository{ctrl: ctrl}
	mock.recorder = &MockApiKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiKeyRepository) EXPECT() *MockApiKeyRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockApiKeyRepository) Get(ctx context.Context, value string) (*entity.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, value)
	ret0, _ := ret[0].(*entity.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockApiKeyRepositoryMockRecorder) Get(ctx, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApiKeyRepository)(nil).Get), ctx, value)
}

// GetBlockedDuration mocks base method.
func (m *MockApiKeyRepository) GetBlockedDuration(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockedDuration", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockedDuration indicates an expected call of GetBlockedDuration.
func (mr *MockApiKeyRepositoryMockRecorder) GetBlockedDuration(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockedDuration", reflect.TypeOf((*MockApiKeyRepository)(nil).GetBlockedDuration), ctx, key)
}

// GetRequest mocks base method.
func (m *MockApiKeyRepository) GetRequest(ctx context.Context, key string) (*entity.RateLimiter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx, key)
	ret0, _ := ret[0].(*entity.RateLimiter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockApiKeyRepositoryMockRecorder) GetRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockApiKeyRepository)(nil).GetRequest), ctx, key)
}

// Save mocks base method.
func (m *MockApiKeyRepository) Save(ctx context.Context, key *entity.ApiKey) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockApiKeyRepositoryMockRecorder) Save(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockApiKeyRepository)(nil).Save), ctx, key)
}

// SaveBlockedDuration mocks base method.
func (m *MockApiKeyRepository) SaveBlockedDuration(ctx context.Context, key string, BlockedDuration int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBlockedDuration", ctx, key, BlockedDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockedDuration indicates an expected call of SaveBlockedDuration.
func (mr *MockApiKeyRepositoryMockRecorder) SaveBlockedDuration(ctx, key, BlockedDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockedDuration", reflect.TypeOf((*MockApiKeyRepository)(nil).SaveBlockedDuration), ctx, key, BlockedDuration)
}

// UpsertRequest mocks base method.
func (m *MockApiKeyRepository) UpsertRequest(ctx context.Context, key string, rl *entity.RateLimiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRequest", ctx, key, rl)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRequest indicates an expected call of UpsertRequest.
func (mr *MockApiKeyRepositoryMockRecorder) UpsertRequest(ctx, key, rl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRequest", reflect.TypeOf((*MockApiKeyRepository)(nil).UpsertRequest), ctx, key, rl)
}

// MockIPRepository is a mock of IPRepository interface.
type MockIPRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPRepositoryMockRecorder
}

// MockIPRepositoryMockRecorder is the mock recorder for MockIPRepository.
type MockIPRepositoryMockRecorder struct {
	mock *MockIPRepository
}

// NewMockIPRepository creates a new mock instance.
func NewMockIPRepository(ctrl *gomock.Controller) *MockIPRepository {
	mock := &MockIPRepository{ctrl: ctrl}
	mock.recorder = &MockIPRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPRepository) EXPECT() *MockIPRepositoryMockRecorder {
	return m.recorder
}

// GetBlockedDuration mocks base method.
func (m *MockIPRepository) GetBlockedDuration(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockedDuration", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockedDuration indicates an expected call of GetBlockedDuration.
func (mr *MockIPRepositoryMockRecorder) GetBlockedDuration(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockedDuration", reflect.TypeOf((*MockIPRepository)(nil).GetBlockedDuration), ctx, key)
}

// GetRequest mocks base method.
func (m *MockIPRepository) GetRequest(ctx context.Context, key string) (*entity.RateLimiter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx, key)
	ret0, _ := ret[0].(*entity.RateLimiter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockIPRepositoryMockRecorder) GetRequest(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockIPRepository)(nil).GetRequest), ctx, key)
}

// SaveBlockedDuration mocks base method.
func (m *MockIPRepository) SaveBlockedDuration(ctx context.Context, key string, BlockedDuration int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBlockedDuration", ctx, key, BlockedDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockedDuration indicates an expected call of SaveBlockedDuration.
func (mr *MockIPRepositoryMockRecorder) SaveBlockedDuration(ctx, key, BlockedDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockedDuration", reflect.TypeOf((*MockIPRepository)(nil).SaveBlockedDuration), ctx, key, BlockedDuration)
}

// UpsertRequest mocks base method.
func (m *MockIPRepository) UpsertRequest(ctx context.Context, key string, rl *entity.RateLimiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRequest", ctx, key, rl)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRequest indicates an expected call of UpsertRequest.
func (mr *MockIPRepositoryMockRecorder) UpsertRequest(ctx, key, rl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRequest", reflect.TypeOf((*MockIPRepository)(nil).UpsertRequest), ctx, key, rl)
}
